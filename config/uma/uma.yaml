%YAML:1.0

#common parameters
imu_topic: "/imu0/data"
image_topic: "/cam2/image_raw"
output_path: "/home/zj/vins_output/uma/two-floors-csc1/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 752
image_height: 480

distortion_parameters:
   k1: -0.11566634307511932
   k2: 0.08987699968528752
   p1: -0.0005582794020918663
   p2: -0.0018357664315637888
projection_parameters:
   fx: 605.7455777299853
   fy: 607.9735414995575
   cx: 370.360573680134
   cy: 206.06348100221066

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # data: [ -0.9996891001069981, -0.024321238097913023, 0.005493678607751144,
   #         0.024372821606514775, -0.9996575482196979, 0.009526376767667806,
   #         0.005260104010154635, 0.009657311466820284, 0.9999395319923278]
   data: [ -9.9969672034108426e-01, 2.3708589773492491e-02, 6.6610892676954962e-03, 
         -2.3660237600706558e-02, -9.9969379536343506e-01, 7.2462865337011278e-03,
         6.8308488460858581e-03, 7.0864859276395901e-03, 9.9995155943737557e-01 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [0.11425322792996404, -0.013218431734117795, -0.03159608818108305]
   data: [ 1.1643024840999948e-01, -1.4673510437152816e-02, 4.2101172586171000e-02 ]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. 
gyr_n: 0.01         # gyroscope measurement noise standard deviation.   
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.

g_norm: 9.81      # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/zj/vins_output/openloris/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
#0.00534915928352496
#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
